# app/schemas/otp.py

from typing import Optional
from datetime import datetime

from pydantic import BaseModel, Field

# Base schema for common OTP attributes
class OTPBase(BaseModel):
    otp_code: str = Field(..., min_length=6, max_length=10) # Assuming OTPs are 6-10 digits
    expires_at: datetime

    class Config:
        from_attributes = True # For Pydantic V2+, use from_attributes instead of orm_mode = True

# Schema for creating a new OTP record
# Allows association with either user_id or demo_user_id
class OTPCreate(BaseModel):
    user_id: Optional[int] = None
    demo_user_id: Optional[int] = None
    # otp_code and expires_at are typically generated by the backend,
    # but can be optionally provided for testing or specific scenarios.
    # If you want to force generation in CRUD, remove them here.
    otp_code: Optional[str] = Field(None, min_length=6, max_length=10)
    expires_at: Optional[datetime] = None

    class Config:
        from_attributes = True

# Schema for verifying an OTP (e.g., in an API endpoint)
class OTPVerify(BaseModel):
    otp_code: str = Field(..., min_length=6, max_length=10)
    email: str # Assuming verification is often done by email
    user_type: str # 'user' or 'demo_user' to distinguish

# Schema for OTP data as stored in the database (includes ID)
class OTPInDBBase(OTPBase):
    id: int
    user_id: Optional[int] = None # Can be None if demo_user_id is set
    demo_user_id: Optional[int] = None # Can be None if user_id is set
    created_at: datetime

# Full schema for reading OTP data (what you'd typically return from an API, though often not returned directly)
class OTP(OTPInDBBase):
    pass
